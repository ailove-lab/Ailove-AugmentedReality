/*
-----------------------------------------------------------------------------
Filename:    GraphicsEngine.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (June 2010)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __GraphicsEngine_h_
#define __GraphicsEngine_h_

#include "BaseApplication.h"
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif

#include <list>
#include <string>
#include <map>
#include "boost/shared_ptr.hpp"
#include "ARManager.h"
#include "Model.h"

class VideoFrame;
class XmlSerializer;

namespace Ogre {
    class Timer;
}

namespace OgreMax {
    class OgreMaxScene;
}

class ModelController;

//-----------------------------------------------------------------------------

/** Incapsulates all graphics related functionality */
class GraphicsEngine : public BaseApplication 
{
    struct Logo {

        Logo();
        void serialize(XmlSerializer& sr);

        std::string fileName;
        float x;
        float y;
        float width;
        float height;

    };

public:
    GraphicsEngine(ARManager* manager);
    virtual ~GraphicsEngine(void);

    void serialize(XmlSerializer& sr);

protected:
    virtual void createScene(void);
    void createLogos();
    
    void updateBackground(boost::shared_ptr<ARManager::Data> frameData);
    void updateARModels(boost::shared_ptr<ARManager::Data> frameData);

    void initBackground(int width, int height);

    void showSceneLight(const std::string& name, bool show);

    virtual bool frameRenderingQueued(const Ogre::FrameEvent& evt);
    virtual bool frameEnded(const Ogre::FrameEvent& evt);
    virtual bool showConfigDialog(void);

    virtual bool keyPressed( const OIS::KeyEvent &arg );

private:
    boost::shared_ptr<VideoFrame> prevFrame;
    boost::shared_ptr<Ogre::Timer> timer;
    boost::shared_ptr<OgreMax::OgreMaxScene> ogreMaxScene;
    ARManager* manager;

    static std::string BACKGROUND_TEXTURE_NAME;
    static std::string BACKGROUND_NODE_NAME;
    static std::string BACKGROUND_MAT_NAME;
    static unsigned long VISIBILITY_TIME;

    std::list<Model> models;
    std::list<Logo> logos;

    std::map<int, unsigned long> lastUpdatedTime;
    bool showConfig;
    int camPattern;
    float animationSpeed;
    std::vector<boost::shared_ptr<ModelController> > modelControllers;
};

#endif // #ifndef __GraphicsEngine_h_
